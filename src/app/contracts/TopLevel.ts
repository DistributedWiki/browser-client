/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class TopLevel extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "titlesList",
        outputs: [{ name: "", type: "bytes32" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        constant: false,
        inputs: [
          { name: "title", type: "bytes32" },
          { name: "ID", type: "bytes32" }
        ],
        name: "createArticle",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nTitles",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "title", type: "bytes32" }],
        name: "getArticle",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TopLevel> {
    const contract = new TopLevel(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get nTitles(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.nTitles, []);
  }
  public titlesList(arg0: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.titlesList, [arg0.toString()]);
  }
  public getArticle(title: BigNumber): Promise<string> {
    return promisify(this.rawWeb3Contract.getArticle, [title.toString()]);
  }

  public createArticleTx(
    title: BigNumber,
    ID: BigNumber
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "createArticle", [
      title.toString(),
      ID.toString()
    ]);
  }
}
